# backup_monitoring.py
import subprocess
import re
import chardet
from datetime import datetime, timedelta
import os

def get_backup_status():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:
    - –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    - –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    try:
        status_lines = []
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö
        last_backup_info = _get_last_backup_info()
        status_lines.append("üìÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        status_lines.append(f"- –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ø–∏—è: {last_backup_info}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_info = _get_backup_schedule()
        status_lines.append(f"- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule_info}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
        storage_info = _get_storage_info()
        status_lines.extend(storage_info)
        
        return "\n".join(status_lines)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö: {str(e)}"

def get_backup_versions():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–ø–∏–π.
    """
    try:
        cmd = "wbadmin get versions"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –≤ user_management.py
        detected = chardet.detect(raw_bytes)
        detected_encoding = detected.get("encoding", None)
        confidence = detected.get("confidence", 0)
        
        if detected_encoding and confidence > 0.5:
            decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
        else:
            decoded_output = raw_bytes.decode("cp866", errors="replace")
        
        if proc.returncode != 0:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, Windows Server Backup –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        lines = []
        lines.append("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        
        # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ wbadmin get versions –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        backup_entries = _parse_backup_versions_ru(decoded_output)
        
        if not backup_entries:
            lines.append("üîç –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for entry in backup_entries[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–ø–∏–π
                lines.append(f"‚Ä¢ {entry}")
        
        return "\n".join(lines)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}"

def start_manual_backup():
    """
    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        cmd = "wbadmin get schedule"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        
        if proc.returncode != 0:
            return False, "‚ùå –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Windows Server Backup."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        current_status = _get_current_backup_status()
        if "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" in current_status.lower() or "running" in current_status.lower():
            return False, "‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        
        # –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫:
        # cmd = "wbadmin start backup -backupTarget:E: -include:C: -quiet"
        # –ù–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        
        return True, "‚ÑπÔ∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω. –î–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

def check_backup_disk_space():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        lines = []
        lines.append("üíæ –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤—ã—Ö –¥–∏—Å–∫–∞—Ö
        target_drives = _get_backup_target_drives()
        
        if not target_drives:
            lines.append("‚ö†Ô∏è –¶–µ–ª–µ–≤—ã–µ –¥–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
            return "\n".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞–∂–¥–æ–º –¥–∏—Å–∫–µ
        for drive in target_drives:
            space_info = _get_drive_space(drive)
            lines.append(f"- –î–∏—Å–∫ {drive}: {space_info}")
        
        return "\n".join(lines)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–∞—Ö: {str(e)}"

# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==============

def _get_last_backup_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        cmd = "wbadmin get versions"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –≤ VPN –º–æ–¥—É–ª–µ
        detected = chardet.detect(raw_bytes)
        detected_encoding = detected.get("encoding", None)
        confidence = detected.get("confidence", 0)
        
        if detected_encoding and confidence > 0.5:
            decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
        else:
            decoded_output = raw_bytes.decode("cp866", errors="replace")
        
        if proc.returncode != 0:
            return "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ø–∏—é - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        lines = [line.strip() for line in decoded_output.splitlines() if line.strip()]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        date_patterns = [
            r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}:\d{2})',  # 09.09.2025 23:00
            r'(\d{2}/\d{2}/\d{4})\s+(\d{2}:\d{2})',    # 09/09/2025 23:00
            r'(\d{4}-\d{2}-\d{2})\s+(\d{2}:\d{2})',    # 2025-09-09 23:00
        ]
        
        latest_date = None
        latest_time = None
        latest_status = None
        
        for line in lines:
            for pattern in date_patterns:
                match = re.search(pattern, line)
                if match:
                    date_str = match.group(1)
                    time_str = match.group(2)
                    
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                        if '.' in date_str:
                            backup_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
                        elif '/' in date_str:
                            backup_datetime = datetime.strptime(f"{date_str} {time_str}", "%d/%m/%Y %H:%M")
                        else:
                            backup_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                        
                        if latest_date is None or backup_datetime > latest_date:
                            latest_date = backup_datetime
                            latest_time = time_str
                            
                            # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö
                            if "—É—Å–ø–µ—Ö" in line.lower():
                                latest_status = "‚úÖ"
                            elif "–æ—à–∏–±–∫–∞" in line.lower() or "–Ω–µ—É–¥–∞—á" in line.lower():
                                latest_status = "‚ùå"
                            
                    except ValueError:
                        continue
        
        if latest_date:
            time_diff = datetime.now() - latest_date
            status_indicator = latest_status if latest_status else ""
            
            if time_diff.days == 0:
                return f"üü¢ –°–µ–≥–æ–¥–Ω—è –≤ {latest_time} {status_indicator}".strip()
            elif time_diff.days == 1:
                return f"üü° –í—á–µ—Ä–∞ –≤ {latest_time} {status_indicator}".strip()
            elif time_diff.days <= 7:
                return f"üü° {time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ({latest_date.strftime('%d.%m.%Y')}) {status_indicator}".strip()
            else:
                return f"üî¥ {time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ({latest_date.strftime('%d.%m.%Y')}) {status_indicator}".strip()
        
        return "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def _get_backup_schedule():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Task Scheduler"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º schtasks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö Windows Backup
        cmd = 'schtasks /query /fo CSV /tn "\\Microsoft\\Windows\\Backup\\*"'
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        
        if proc.returncode == 0:
            raw_bytes = proc.stdout
            detected = chardet.detect(raw_bytes)
            detected_encoding = detected.get("encoding", None)
            confidence = detected.get("confidence", 0)
            
            if detected_encoding and confidence > 0.5:
                decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
            else:
                decoded_output = raw_bytes.decode("cp866", errors="replace")
            
            # –ü–∞—Ä—Å–∏–º CSV –≤—ã–≤–æ–¥
            lines = [line.strip() for line in decoded_output.splitlines() if line.strip()]
            
            if len(lines) > 1:  # –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞–Ω–Ω—ã–µ
                # –ò—â–µ–º –∑–∞–¥–∞—á–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "Backup" –∏–ª–∏ "WindowsBackup"
                for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if "backup" in line.lower() and "ready" in line.lower():
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
                        task_name = line.split(',')[0].strip('"')
                        schedule_info = _get_task_schedule_details(task_name)
                        if schedule_info:
                            return schedule_info
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - PowerShell –∫–æ–º–∞–Ω–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
        ps_cmd = '''powershell -Command "& {
            try {
                $scheduler = New-Object -ComObject Schedule.Service;
                $scheduler.Connect();
                $folder = $scheduler.GetFolder('\\Microsoft\\Windows\\Backup');
                $tasks = $folder.GetTasks(0);
                foreach ($task in $tasks) {
                    $def = $task.Definition;
                    foreach ($tr in $def.Triggers) {
                        try {
                            $start = [datetime]::Parse($tr.StartBoundary);
                            $time = $start.ToString('HH:mm');
                            if ($tr.Type -eq 2) { Write-Host 'Daily at' $time; }
                            elseif ($tr.Type -eq 3) { Write-Host 'Weekly at' $time; }
                            else { Write-Host 'Scheduled at' $time; }
                            break;
                        } catch {}
                    }
                    break;
                }
            } catch { Write-Host 'Error accessing scheduler'; }
        }"'''
        
        proc2 = subprocess.run(ps_cmd, capture_output=True, shell=True)
        if proc2.returncode == 0:
            raw_bytes2 = proc2.stdout
            detected2 = chardet.detect(raw_bytes2)
            detected_encoding2 = detected2.get("encoding", None)
            confidence2 = detected2.get("confidence", 0)
            
            if detected_encoding2 and confidence2 > 0.5:
                decoded_output2 = raw_bytes2.decode(detected_encoding2, errors="replace")
            else:
                decoded_output2 = raw_bytes2.decode("cp866", errors="replace")
            
            if decoded_output2.strip() and "error" not in decoded_output2.lower():
                return f"üü¢ {decoded_output2.strip()}"
        
        # Fallback: –∞–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–π (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        recent_dates = _get_recent_backup_dates()
        if len(recent_dates) >= 3:
            intervals = []
            for i in range(1, min(len(recent_dates), 6)):
                diff = (recent_dates[i-1] - recent_dates[i]).total_seconds() / 3600
                intervals.append(diff)
            
            if intervals:
                avg_interval = sum(intervals) / len(intervals)
                times = [date.strftime("%H:%M") for date in recent_dates[:3]]
                common_time = max(set(times), key=times.count) if times else None
                
                if 20 <= avg_interval <= 28:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 24 —á–∞—Å–∞
                    if common_time:
                        return f"üü¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {common_time} (–∞–Ω–∞–ª–∏–∑ –∫–æ–ø–∏–π)"
                    else:
                        return "üü¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–∞–Ω–∞–ª–∏–∑ –∫–æ–ø–∏–π)"
                elif 160 <= avg_interval <= 200:  # –ü—Ä–∏–º–µ—Ä–Ω–æ –Ω–µ–¥–µ–ª—è
                    return "üü¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∞–Ω–∞–ª–∏–∑ –∫–æ–ø–∏–π)"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–æ–ø–∏–∏, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if recent_dates and len(recent_dates) > 0:
            last_backup = recent_dates[0]
            days_ago = (datetime.now() - last_backup).days
            if days_ago <= 2:
                return "üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ (–µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–æ–ø–∏–∏)"
        
        return "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def _get_task_schedule_details(task_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        cmd = f'schtasks /query /fo LIST /tn "{task_name}"'
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        
        if proc.returncode == 0:
            raw_bytes = proc.stdout
            detected = chardet.detect(raw_bytes)
            detected_encoding = detected.get("encoding", None)
            confidence = detected.get("confidence", 0)
            
            if detected_encoding and confidence > 0.5:
                decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
            else:
                decoded_output = raw_bytes.decode("cp866", errors="replace")
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤ –≤—ã–≤–æ–¥–µ
            schedule_type = None
            schedule_time = None
            
            for line in decoded_output.splitlines():
                line = line.strip()
                if ":" in line:
                    key, value = line.split(":", 1)
                    key = key.strip().lower()
                    value = value.strip()
                    
                    if "schedule type" in key or "—Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è" in key:
                        if "daily" in value.lower() or "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" in value.lower():
                            schedule_type = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
                        elif "weekly" in value.lower() or "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" in value.lower():
                            schedule_type = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
                    
                    elif "start time" in key or "–≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞" in key:
                        schedule_time = value
            
            if schedule_type and schedule_time:
                return f"üü¢ {schedule_type} –≤ {schedule_time}"
            elif schedule_type:
                return f"üü¢ {schedule_type}"
            elif schedule_time:
                return f"üü¢ –í {schedule_time}"
        
        return None
        
    except Exception as e:
        return None

def _get_recent_backup_dates():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        cmd = "wbadmin get versions"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout
        
        detected = chardet.detect(raw_bytes)
        detected_encoding = detected.get("encoding", None)
        confidence = detected.get("confidence", 0)
        
        if detected_encoding and confidence > 0.5:
            decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
        else:
            decoded_output = raw_bytes.decode("cp866", errors="replace")
        
        dates = []
        lines = [line.strip() for line in decoded_output.splitlines() if line.strip()]
        
        # –ò—â–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM
        for line in lines:
            date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}:\d{2})', line)
            if date_match:
                date_str, time_str = date_match.groups()
                try:
                    backup_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
                    dates.append(backup_datetime)
                except ValueError:
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        dates.sort(reverse=True)
        return dates[:10]
        
    except Exception as e:
        return []

def _get_current_backup_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        cmd = "wbadmin get status"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –≤ user_management.py
        detected = chardet.detect(raw_bytes)
        detected_encoding = detected.get("encoding", None)
        confidence = detected.get("confidence", 0)
        
        if detected_encoding and confidence > 0.5:
            decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
        else:
            decoded_output = raw_bytes.decode("cp866", errors="replace")
        
        not_running_phrases = ["–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "not running", "no operation", "–Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"]
        running_phrases = ["–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "running", "in progress", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"]
        
        for phrase in not_running_phrases:
            if phrase in decoded_output.lower():
                return "üü¢ –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                
        for phrase in running_phrases:
            if phrase in decoded_output.lower():
                return "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        
        return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def _get_storage_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        lines = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ _get_backup_target_drives()
        target_drives = _get_backup_target_drives()
        
        if target_drives:
            if len(target_drives) == 1:
                lines.append(f"- –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: üü¢ –î–∏—Å–∫ {target_drives[0]}")
            else:
                lines.append(f"- –ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è: üü¢ –î–∏—Å–∫–∏ {', '.join(target_drives)}")
            return lines
        
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å–∫–∏, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤–æ–æ–±—â–µ
        return []
        
    except Exception as e:
        return []  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É

def _check_backup_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–±—É Windows Server Backup - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥ –∏–∑ system_info.py
        service_status = get_service_status("Block Level Backup Engine Service")
        
        if service_status.upper() == "RUNNING":
            return "üü¢ –°–ª—É–∂–±–∞ –∞–∫—Ç–∏–≤–Ω–∞"
        elif service_status.upper() == "STOPPED":
            return "üî¥ –°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            return f"üü° –°–ª—É–∂–±–∞: {service_status}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"

def get_service_status(service_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã –ø–æ –µ—ë –∏–º–µ–Ω–∏ (sc query "–∏–º—è").
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –≤ system_info.py
    """
    try:
        cmd = f'sc query "{service_name}"'
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –≤ system_info.py
        detected = chardet.detect(raw_bytes)
        enc = detected.get("encoding", "cp866")
        decoded = raw_bytes.decode(enc, errors="replace")

        # –ü—Ä–∏–º–µ—Ä –∞–Ω–≥–ª. —Å—Ç—Ä–æ–∫–∏: "STATE              : 4  RUNNING"
        # –ù–∞ —Ä—É—Å—Å–∫–æ–π Windows –º–æ–∂–µ—Ç –±—ã—Ç—å "–°–û–°–¢–û–Ø–ù–ò–ï         : 4  RUNNING"
        match = re.search(r"(?:STATE|–°–û–°–¢–û–Ø–ù–ò–ï)\s*:\s*\d+\s+(\w+)", decoded, re.IGNORECASE)
        if match:
            state = match.group(1).upper()
            return state  # RUNNING / STOPPED / PAUSED –∏ —Ç.–¥.
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª—É–∂–±—ã {service_name}: {e}"

def _parse_backup_versions_ru(output):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ wbadmin get versions –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    entries = []
    lines = [line.strip() for line in output.splitlines() if line.strip()]
    
    current_entry = {}
    
    for line in lines:
        line_lower = line.lower()
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
        if any(phrase in line_lower for phrase in ["–≤–µ—Ä—Å–∏—è", "version", "backup time", "–≤—Ä–µ–º—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"]):
            if current_entry and current_entry.get("time"):
                entries.append(_format_backup_entry(current_entry))
            current_entry = {}
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –ø—Ä—è–º–æ –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            time_match = re.search(r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}:\d{2})', line)
            if time_match:
                current_entry["time"] = f"{time_match.group(1)} {time_match.group(2)}"
        
        # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        elif ":" in line:
            parts = line.split(":", 1)
            if len(parts) == 2:
                key = parts[0].strip().lower()
                value = parts[1].strip()
                
                if any(word in key for word in ["–≤—Ä–µ–º—è", "time", "–¥–∞—Ç–∞", "date"]):
                    current_entry["time"] = value
                elif any(word in key for word in ["—Ç–∏–ø", "type", "—Ä–µ–∂–∏–º"]):
                    current_entry["type"] = value
                elif any(word in key for word in ["—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "status", "result", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–æ–ø–∏—Å–∞–Ω–∏–µ"]):
                    current_entry["status"] = value
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    if current_entry and current_entry.get("time"):
        entries.append(_format_backup_entry(current_entry))
    
    return entries

def _format_backup_entry(entry):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    time_str = entry.get("time", "–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    type_str = entry.get("type", "")
    status_str = entry.get("status", "")
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    parts = [time_str]
    if type_str:
        parts.append(f"({type_str})")
    if status_str:
        if "—É—Å–ø–µ—Ö" in status_str.lower() or "success" in status_str.lower():
            parts.append("‚úÖ")
        elif "–æ—à–∏–±–∫–∞" in status_str.lower() or "error" in status_str.lower() or "–Ω–µ—É–¥–∞—á" in status_str.lower():
            parts.append("‚ùå")
        else:
            parts.append(f"[{status_str}]")
    
    return " ".join(parts)

def _get_backup_target_drives():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ø–∏—è—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ summary –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        cmd = "wbadmin get versions -summary"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        
        if proc.returncode == 0:
            raw_bytes = proc.stdout
            detected = chardet.detect(raw_bytes)
            detected_encoding = detected.get("encoding", None)
            confidence = detected.get("confidence", 0)
            
            if detected_encoding and confidence > 0.5:
                decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
            else:
                decoded_output = raw_bytes.decode("cp866", errors="replace")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏—Å–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫ "–ö–æ–Ω–µ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: –ù–µ—Å—ä–µ–º–Ω—ã–π –¥–∏—Å–∫ —Å –∏–º–µ–Ω–µ–º G:"
            backup_drives = set()
            for line in decoded_output.splitlines():
                if "–∫–æ–Ω–µ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏" in line.lower():
                    match = re.search(r'—Å –∏–º–µ–Ω–µ–º ([A-Za-z]:)', line)
                    if match:
                        backup_drives.add(match.group(1))
            
            if backup_drives:
                return sorted(list(backup_drives))
        
        # Fallback: –µ—Å–ª–∏ —Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ wbadmin get versions  
        cmd2 = "wbadmin get versions"
        proc2 = subprocess.run(cmd2, capture_output=True, shell=True)
        
        if proc2.returncode == 0:
            raw_bytes2 = proc2.stdout
            detected2 = chardet.detect(raw_bytes2)
            detected_encoding2 = detected2.get("encoding", None)
            confidence2 = detected2.get("confidence", 0)
            
            if detected_encoding2 and confidence2 > 0.5:
                decoded_output2 = raw_bytes2.decode(detected_encoding2, errors="replace")
            else:
                decoded_output2 = raw_bytes2.decode("cp866", errors="replace")
            
            # –ò—â–µ–º –¥–∏—Å–∫–∏ –≤ –æ–±—ã—á–Ω–æ–º –≤—ã–≤–æ–¥–µ wbadmin get versions
            backup_drives2 = set()
            disk_matches = re.findall(r'[A-Za-z]:', decoded_output2)
            for disk in disk_matches:
                if disk not in ['C:', 'D:']:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Å–∫–∏
                    backup_drives2.add(disk)
            
            if backup_drives2:
                return sorted(list(backup_drives2))
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∏—Å–∫–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Å–≤–æ–±–æ–¥–Ω—ã–º –º–µ—Å—Ç–æ–º
        drives = []
        cmd3 = 'wmic logicaldisk where "DriveType=3" get DeviceID,FreeSpace,Size'
        proc3 = subprocess.run(cmd3, capture_output=True, shell=True)
        
        if proc3.returncode == 0:
            raw_bytes3 = proc3.stdout
            detected3 = chardet.detect(raw_bytes3)
            detected_encoding3 = detected3.get("encoding", None)
            confidence3 = detected3.get("confidence", 0)
            
            if detected_encoding3 and confidence3 > 0.5:
                decoded_output3 = raw_bytes3.decode(detected_encoding3, errors="replace")
            else:
                decoded_output3 = raw_bytes3.decode("cp866", errors="replace")
            
            lines = [line.strip() for line in decoded_output3.splitlines() if line.strip()]
            
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                parts = line.split()
                if len(parts) >= 3:
                    drive = parts[0]
                    try:
                        free_space = int(parts[1])
                        # –ï—Å–ª–∏ –¥–∏—Å–∫ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 10 –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–ª—å—é
                        if free_space > 10 * 1024 * 1024 * 1024:  # 10 –ì–ë –≤ –±–∞–π—Ç–∞—Ö
                            drives.append(drive)
                    except:
                        continue
            
            return drives[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 3 –¥–∏—Å–∫–æ–≤
        
        return []
        
    except Exception as e:
        return []

def _get_drive_space(drive):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        cmd = f'wmic logicaldisk where "DeviceID=\'{drive}\'" get FreeSpace,Size'
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –≤ user_management.py
        detected = chardet.detect(raw_bytes)
        detected_encoding = detected.get("encoding", None)
        confidence = detected.get("confidence", 0)
        
        if detected_encoding and confidence > 0.5:
            decoded_output = raw_bytes.decode(detected_encoding, errors="replace")
        else:
            decoded_output = raw_bytes.decode("cp866", errors="replace")
        
        lines = [line.strip() for line in decoded_output.splitlines() if line.strip()]
        
        if len(lines) > 1:
            parts = lines[1].split()
            if len(parts) >= 2:
                free_space = int(parts[0]) / (1024**3)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ì–ë
                total_space = int(parts[1]) / (1024**3)
                used_space = total_space - free_space
                used_percent = (used_space / total_space) * 100 if total_space > 0 else 0
                
                emoji = "üî¥" if used_percent > 90 else "üü°" if used_percent > 75 else "üü¢"
                
                return f"{used_space:.1f}/{total_space:.1f} –ì–ë ({used_percent:.1f}%) {emoji}"
        
        return "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"