import subprocess
import chardet
import re
from backup_monitoring import _get_backup_schedule

def get_server_load():
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è:
      1) –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CPU, –ø–∞–º—è—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∏—Å–∫–∞–º.
      2) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–± "1C:Enterprise 8.2 Server Agent" –∏ "1C:Enterprise 8.3 Server Agent".
      3) –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
      4) –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
      5) –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CPU
        cpu_load, cpu_emoji = _get_cpu_usage()

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞–º—è—Ç–∏
        mem_usage_str, mem_emoji = _get_memory_usage()

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö
        disk_lines = _get_disks_info()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–± 1–°
        service_82_status = get_service_status("1C:Enterprise 8.2 Server Agent")
        service_83_status = get_service_status("1C:Enterprise 8.3 Server Agent")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (RUNNING => üü¢, –∏–Ω–∞—á–µ => üî¥)
        service_82_emoji = "üü¢" if service_82_status.upper() == "RUNNING" else "üî¥"
        service_83_emoji = "üü¢" if service_83_status.upper() == "RUNNING" else "üî¥"

        # 5. –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        boot_time_str = _get_boot_time()
        
        # 6. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        backup_schedule = _get_backup_schedule()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        lines = []
        lines.append("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:")
        lines.append(f"- CPU: {cpu_load}% {cpu_emoji}")
        lines.append(f"- –ü–∞–º—è—Ç—å: {mem_usage_str} {mem_emoji}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –æ –¥–∏—Å–∫–∞—Ö
        lines.extend(disk_lines)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Å–ª—É–∂–± 1–°
        lines.append(f"- –°–ª—É–∂–±–∞ 1–° 8.2: {service_82_status} {service_82_emoji}")
        lines.append(f"- –°–ª—É–∂–±–∞ 1–° 8.3: {service_83_status} {service_83_emoji}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        lines.append(f"- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {backup_schedule}")

        # –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
        lines.append(f"- –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {boot_time_str}")

        return "\n".join(lines)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ: {str(e)}"

# ------------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------------------------------------------------------------

def _get_cpu_usage():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≥—Ä—É–∑–∫–∏, emoji).
    –ï—Å–ª–∏ >80%, —Ç–æ –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫, –∏–Ω–∞—á–µ –∑–µ–ª—ë–Ω—ã–π.
    """
    cmd = "wmic cpu get loadpercentage"
    proc = subprocess.run(cmd, capture_output=True, text=True, shell=True, encoding='cp866')
    lines = [line.strip() for line in proc.stdout.splitlines() if line.strip()]
    cpu_load = "0"
    if len(lines) > 1:
        cpu_load = lines[1]  # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ
    cpu_load = cpu_load.strip() or "0"

    try:
        cpu_value = float(cpu_load)
    except ValueError:
        cpu_value = 0.0

    cpu_emoji = "üî¥" if cpu_value > 80 else "üü¢"
    return cpu_load, cpu_emoji

def _get_memory_usage():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å—Ç—Ä–æ–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_–ø–∞–º—è—Ç–∏, emoji).
    –ï—Å–ª–∏ >80%, —Ç–æ –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫, –∏–Ω–∞—á–µ –∑–µ–ª—ë–Ω—ã–π.
    """
    cmd = "wmic OS get FreePhysicalMemory,TotalVisibleMemorySize"
    proc = subprocess.run(cmd, capture_output=True, text=True, shell=True, encoding='cp866')
    lines = [line.strip() for line in proc.stdout.splitlines() if line.strip()]
    mem_usage_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    mem_emoji = "üü¢"
    if len(lines) > 1:
        mem_data = lines[1].split()
        if len(mem_data) >= 2:
            free_mem_kb = int(mem_data[0])
            total_mem_kb = int(mem_data[1])
            free_mem_mb = free_mem_kb / 1024
            total_mem_mb = total_mem_kb / 1024
            used_mem_mb = total_mem_mb - free_mem_mb
            mem_percent = (used_mem_mb / total_mem_mb) * 100
            mem_usage_str = f"{used_mem_mb:.1f}/{total_mem_mb:.1f} MB ({mem_percent:.1f}%)"
            if mem_percent > 80:
                mem_emoji = "üî¥"
    return mem_usage_str, mem_emoji

def _get_disks_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –¥–∏—Å–∫–∞–º DriveType=3.
    –ü—Ä–∏–º–µ—Ä: ["- –î–∏—Å–∫ (C:): 12.3/100.0 GB (12.3%) üü¢", "- –î–∏—Å–∫ (D:): ..."]
    """
    lines_result = []
    cmd = 'wmic logicaldisk where "DriveType=3" get DeviceID,FreeSpace,Size'
    proc = subprocess.run(cmd, capture_output=True, text=True, shell=True, encoding='cp866')
    raw_lines = [line.strip() for line in proc.stdout.splitlines() if line.strip()]
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for line in raw_lines[1:]:
        parts = line.split()
        if len(parts) < 3:
            continue
        device_id = parts[0]
        free_str = parts[1]
        size_str = parts[2]
        try:
            free_space = int(free_str)
            size = int(size_str)
            free_gb = free_space / (1024**3)
            total_gb = size / (1024**3)
            used_gb = total_gb - free_gb
            used_percent = (used_gb / total_gb) * 100 if total_gb > 0 else 0
            disk_emoji = "üî¥" if used_percent >= 95 else "üü¢"

            line_str = (f"- –î–∏—Å–∫ ({device_id}): "
                        f"{used_gb:.1f}/{total_gb:.1f} GB ({used_percent:.1f}%) {disk_emoji}")
            lines_result.append(line_str)
        except:
            continue
    return lines_result

def get_service_status(service_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã –ø–æ –µ—ë –∏–º–µ–Ω–∏ (sc query "–∏–º—è").
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - "RUNNING", "STOPPED" (–∏–ª–∏ –∏–Ω–æ–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —É–¥–∞—Å—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å),
      - "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å (—Ä–µ–≥–µ–∫—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)" ‚Äì –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Å–æ–≤–ø–∞–ª,
      - "–û—à–∏–±–∫–∞ ..." ‚Äì –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.

    –í –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥—è—Ç—Å—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏.
    """
    try:
        cmd = f'sc query "{service_name}"'
        print("DEBUG: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞:", cmd)
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout

        print("DEBUG: –°—ã—Ä—ã–µ –±–∞–π—Ç—ã –≤—ã–≤–æ–¥–∞ sc query:", raw_bytes)

        detected = chardet.detect(raw_bytes)
        enc = detected.get("encoding", "cp866")
        conf = detected.get("confidence", 0)
        print(f"DEBUG: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {enc} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf})")

        decoded = raw_bytes.decode(enc, errors="replace")
        print("DEBUG: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ sc query:\n", decoded)

        # –ü—Ä–∏–º–µ—Ä –∞–Ω–≥–ª. —Å—Ç—Ä–æ–∫–∏: "STATE              : 4  RUNNING"
        # –ù–∞ —Ä—É—Å—Å–∫–æ–π Windows –º–æ–∂–µ—Ç –±—ã—Ç—å "–°–û–°–¢–û–Ø–ù–ò–ï         : 4  RUNNING"
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ (?:STATE|–°–û–°–¢–û–Ø–ù–ò–ï).
        # –ï—Å–ª–∏ —Å–ª—É–∂–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è —Å—Ç—Ä–æ–∫–∞ (—Å–º. –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥).
        match = re.search(r"(?:STATE|–°–û–°–¢–û–Ø–ù–ò–ï)\s*:\s*\d+\s+(\w+)", decoded, re.IGNORECASE)
        if match:
            state = match.group(1).upper()
            return state  # RUNNING / STOPPED / PAUSED –∏ —Ç.–¥.
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å (—Ä–µ–≥–µ–∫—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª—É–∂–±—ã {service_name}: {e}"

def _get_boot_time():
    """
    –í—ã–∑—ã–≤–∞–µ—Ç systeminfo, –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é chardet,
    –∏—â–µ—Ç —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã:" (–Ω–∞ —Ä—É—Å—Å–∫–æ–π Windows).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "01.03.2025, 12:15:30" –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".
    """
    try:
        cmd = "systeminfo"
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        raw_bytes = proc.stdout

        detected = chardet.detect(raw_bytes)
        enc = detected.get("encoding", "cp866")
        decoded = raw_bytes.decode(enc, errors="replace")

        lines = [l.strip() for l in decoded.splitlines() if l.strip()]
        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã:"
            if line.lower().startswith("–≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã:"):
                # –û–±—Ä–µ–∑–∞–µ–º —Å–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                return line.split(":", 1)[1].strip()
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è systeminfo: {e}"